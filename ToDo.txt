
Katmanlý mimariyle oluþturuldu : Entities, DataAccess, Business, Console, Core katmanlarý

Rent a Car Projesini Çok Katmanlý Kurumsal Mimari altyapýsýnda oluþturdum 

* Core Katmaný oluþturup evrensel kodlarýmýzý yazdým: 
    1- EntityFramework kullanarak "EfEntityRepositoryBase" classý oluþturup Generic Constraintlerini belirttim
    2- IEntity, IDto, IEntityRepository, EfEntityRepositoryBase dosyalarý oluþturuldu.
    3- Car, Brand, Color sýnýflarýnýz için tüm CRUD operasyonlarýný gerçekleþtirdim

-----------------------------------------

* Core katmanýnda Results yapýlandýrmasý yaptým.
  Core katmanýna Utilities klasörü altýna Results klasörü açtým
  Daha önce geliþtirdiðiniz tüm Business sýnýflarýný bu yapýya göre refactor (kodu iyileþtirme) yaptým
    
-------------------------------------------

* Kullanýcýlar, Müþteriler tablosu ve Arabanýn kiralanma bilgisini tutan tablo eklendi.
**Kullanýcýlar ve müþteriler iliþkilidir. 
  Users-->Id,FirstName,LastName,Email,Password   
  Customers-->UserId,CompanyName            
  Rentals-->Id, CarId, CustomerId, RentDate(Kiralama Tarihi), ReturnDate(Teslim Tarihi). Araba teslim edilmemiþse ReturnDate null'dýr.    

    1)Bunlarýn entity'lerini oluþturdum.
    2)CRUD operasyonlarýný yazýldý.
    3)Yeni müþteriler ekledim.
    4)Arabayý kiralama imkanýný kodladým. Rental-->Add
      Arabanýn kiralanabilmesi için arabanýn teslim edilmesi gerekmektedir.

-------------------------------------------
* WebAPI
    WebAPI katmanýný oluþturdum.
    Business katmanýndaki tüm servislerin API karþýlýðýný yazýp Postman'de test ettim.

-------------------------------------------
* 
    1.Autofac desteði ekledim.
    2.FluentValidation desteði ekledim.
    3.AOP (Aspect Oriented Programming) desteði ekledim.
      ValidationAspect  

-------------------------------------------
*
1-Araba resimlerini tutan CarImages tablosu oluþturdum. (Id,CarId,ImagePath,Date) Bir arabanýn birden fazla resmi olabilir.

2-Api üzerinden arabaya resim ekleyecek sistemi yazdým.

3-Resimler projem içerisinde wwwroot\Uploads\Images klasöründe tutulmaktatýr. Resimler yüklendiði isimle deðil, kendi verdiðimiz GUID ile dosyalanmaktadýr.

4-Resim silme, güncelleme yetenekleri ekledim.

5-Bir arabanýn en fazla 5 resmi olabilir.Kuralýný BusinessRules clasýnda oluþturuduðum Run metotu ile kontrol edip Add ve Upload iþlemlerini ona göre gerçkleþtirdim.

5-Resmin eklendiði tarih sistem tarafýndan atandý.(CarImageManager--> Add metotunda atama yapýldý)

6-Bir arabaya ait resimleri listeleme imkaný oluþturdum. (GetByCarId metotu ile)

7-Eðer bir arabaya ait resim yoksa, default bir resim gösterdim. Bu resim toplu arabalarýn olduðu bir resim. (Tek elemanlý liste)

-------------------------------------------
* JWT

1- UserTablosuna -> PasswordHash,PasswordSalt,Satatus kolonlarý eklendi
   OperationClaims ve UserOperationClaims tablolarý eklendi
   Bu tablolarýn entity classlarýný Core da oluþtururuz (Genel her projede kullanýlabilceði için)

2- appsetting.json dosyasýna; Jwt nin configurationýný ekledim. Tokenoptions isminde cofigurasyon oluþturdum.

3- Core katmanýnda ->Utilities ->Security klasörüne ->Encryption,Hashing ve Jwt klasörleri oluþturuldu.Ýçlerine Helper metotlar oluþturuldu. 

  * HashingHelper metotunda -> Hash oluþturma ve doðrulama operasyonlarý gerçekleþir.

  * SecurityKeyHelper -> appsetting de oluþturduðumuz securityKey deðerini byte[] array formatýna çevirmek için CreateSecurityKey metotu oluþturuldu
  * SigningCredentialsHelper -> webApinin hangi anahtarý hangi þifreleme algoritmasýný kullanacaðýný söylediðimiz metot

  * AccessToken classý -> eriþim anahtarý // Token ve Expiration deðiþkenlerini tanýmlandý
  * ITokenHelper -> CreateToken metotu oluþturuldu (veritabanýndaki user ve claimlere göre JWT Token üretecek)
  * JwtHelper -> Jwt'nin oluþturulduðu class 
  * TokenOptions -> Configuration ile appsettings.json da okuduðu deðerleri atayacaðýmýz deðiþkenleri tanýmladýðým class

 4- Extensions metot tanýmladým.Claimler için
   
   * ClaimExtensions -> ClaimExtensions da tanýmladýðýmýz metotlarý JwtHelper.cs ýnda çaðýrýrýz
   * ClaimPrincipalExtensions -> Jwt den gelen claimlerini okumak için .Net deki "ClaimsPrincipal" clasýna Claims ve ClaimRoles metotlarý eklendi
   * ServiceCollectionExtensions ->

5- Authorization (Yetkilnedirme) Aspectleri, Business katmanýna yazýldý
   BusinessAspect klasörü -> Autofac klasörü -> SecuredOperation.cs clasý oluþturuldu

   * SecuredOperation -> Aspect olarak verceðimiz yetkilendirme metotu
   * ServicTool -> WebApi de oluuþturduðumuz Injectionlar gibi iliþkileri oluþturmamýzý saðlar.Aspecti Inject  edebilmek için oluþturdupumuz bir ExtensionsMetottur

6- IUserService'e -> GetByEmail,GetClaims metotlarý eklendi
   IAuthService, AuthManager, AuthController eklendi -> Kayýt olma - Login olma operasyonlarýný gerçekleþtirir

7-  Business -> DependencyResolvers -> Autofac -> AutofacBusinessModule.cs classý içine eklemeler yapýldý. JwtHelper ve AuthManger için dependency baðlantýlarý yazýldý

8- startup.cs'de sistemde authentication olarak hangi sistemin kullanýlacaðý belirtildi. JwtBearer Token kullanýlýr.

   startup.cs'de  "app.UseAuthentication();" middleware'i eklendi. Authorization() den önce olacak þekilde; çünkü önce kimlik doðrulanýr sonra yetkilendirme verilir

9- Dependency Resolution'ý Autofac üzerinden yapýyoruz. .net in kendi IoC Injectionýn devreye girmesi için;
   startup.cs'ye 
      "services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();" ve
      "serciceTool.Create(services);"  kodlarý eklendi.

   Ancak bu tanýmladýðým Injectioný bütün projelerde kullanýlabilir hale getirmek için Core'a taþýdým
   *Core-> Utilities-> IoC-> ICoreModule.cs interfacei oluþturuldu -> Load() metodu tanýmlandý(genel baðýmlýlýklarý yükleyecek metotumuz)

   *Core-> DependencyResolvers-> CoreModule.cs clasý oluþturuldu.IHttpContextAccessor ýnjection kodu buraya yazýldý

   *Core-> Extensions-> ServiceCollectionExtensions.cs clasý oluþturuldu.Baðýmlýlýklarý yüklediðimiz "AddDependencyResolvers" metotu oluþturuldu.
   startup.cs'de bu AddDependencyResolvers metotu çaðrýlýr ve parametre olrak CoreModule verilerek yüklenmesi saðlanýr.





